====================================
C++ Dubbel recursief
====================================
bool even(unsigned int n);
bool odd(unsigned int n);

bool odd(unsigned int n){
    if(n==0){return false;}
    return even(n-1);
}

bool even(unsigned int n){
    if(n==0){return true;}
    return odd(n-1);
}
====================================
This=That3.0++
return :: jumps back to last call point with return value in R0
var=start :: start a function and put return val in var
====================================
inputVal = input                        [get value to evaluate from user]
function odd = n                        [make function odd pass var n]
    if e = n ~~ 0                       [if n equals 0]
        return = 0                      [return false]
    end if o                            [end if]
    n= n minus 1                        [n--]
    return = start function even n      [call even pass var n]
end function odd                        [end odd function]
function even = n                       [make function even pass var n]
    if o = n ~~ 0                       [if n equals 0]
        return = 1                      [return true]
    end if o                            [end if]
    n = n minus 1                       [n--]
    return = start function odd n       [call odd pass var n]
end function even                       [end even function]
isEven = start function even inputVal   [call even pass var inputVal put return in isEven]
isEven = print                          [print isEven]
====================================
C++ Loop
====================================
unsigned int sommig(unsigned int n){
    unsigned int result = 0;
    while(n>=1){
        result += n;
        n--;
    }
    return result;
}
====================================
This=That3.0++
====================================
inputVal = input
function sommig = n
    result = 0
    while sum = n > 0
        result = result plus n
        n = n minus 1
    end while sum
    return = result
end function sommig
sumResult = start function sommig inputVal
sumResult = print
====================================
Main example
====================================
with open("code") as f:
    text = f.read()
tokens = lexer.lex(text)
ast = parser.parse(tokens)
execute(ast)